import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { getFirestore, collection, doc, addDoc, getDocs, deleteDoc, onSnapshot, query, where, setDoc } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';

// --- Helper Functions & Configuration ---

// IMPORTANT: These are placeholders. In a real environment, these would be populated.
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
    apiKey: "YOUR_API_KEY",
    authDomain: "YOUR_AUTH_DOMAIN",
    projectId: "YOUR_PROJECT_ID",
    storageBucket: "YOUR_STORAGE_BUCKET",
    messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
    appId: "YOUR_APP_ID"
};

const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-pdf-app';
const ADMIN_PASSWORD = 'LYSIVIN0007+';

// --- Firebase Initialization ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

// --- SVG Icons ---
const UploadIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
    </svg>
);

const TrashIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
    </svg>
);

const BookIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
    </svg>
);

const HomeIcon = () => (
     <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
    </svg>
);


// --- Main App Component ---
export default function App() {
    const [page, setPage] = useState('home'); // 'home', 'adminLogin', 'adminDashboard', 'category'
    const [isAdmin, setIsAdmin] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    useEffect(() => {
        const adminStatus = sessionStorage.getItem('isAdmin') === 'true';
        setIsAdmin(adminStatus);

        const unsubscribe = onAuthStateChanged(auth, async (user) => {
            if (user) {
                setUserId(user.uid);
            } else {
                try {
                    if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                         await signInWithCustomToken(auth, __initial_auth_token);
                    } else {
                         await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Authentication Error:", error);
                }
            }
            setIsAuthReady(true);
        });
        return () => unsubscribe();
    }, []);

    const navigateToCategory = (category) => {
        setSelectedCategory(category);
        setPage('category');
    };

    const renderContent = () => {
        if (!isAuthReady) {
            return <div className="flex justify-center items-center h-screen"><div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div></div>;
        }
        
        switch (page) {
            case 'adminLogin':
                return <AdminLogin setIsAdmin={setIsAdmin} setPage={setPage} />;
            case 'adminDashboard':
                return isAdmin ? <AdminDashboard /> : <AdminLogin setIsAdmin={setIsAdmin} setPage={setPage} />;
            case 'category':
                return <CategoryView category={selectedCategory} isAdmin={isAdmin} />;
            case 'home':
            default:
                return <Home onCategorySelect={navigateToCategory} />;
        }
    };

    return (
        <div className="bg-gray-50 min-h-screen font-sans">
            <header className="bg-white shadow-md">
                <nav className="container mx-auto px-6 py-3 flex justify-between items-center">
                    <div className="text-2xl font-bold text-gray-800 cursor-pointer" onClick={() => setPage('home')}>
                        <span className="text-blue-600">PDF</span> Library
                    </div>
                    <div>
                        <button
                            onClick={() => setPage('home')}
                            className="text-gray-600 hover:text-blue-600 focus:outline-none mx-2 flex items-center"
                        >
                           <HomeIcon /> Home
                        </button>
                        <button
                            onClick={() => setPage(isAdmin ? 'adminDashboard' : 'adminLogin')}
                            className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
                        >
                            {isAdmin ? 'Admin Dashboard' : 'Admin Login'}
                        </button>
                    </div>
                </nav>
            </header>
            <main className="container mx-auto px-6 py-8">
                {renderContent()}
            </main>
             <footer className="bg-white mt-12 py-4">
                <div className="container mx-auto px-6 text-center text-gray-500 text-sm">
                    &copy; {new Date().getFullYear()} PDF Library. All Rights Reserved.
                </div>
            </footer>
        </div>
    );
}

// --- Admin Login Component ---
function AdminLogin({ setIsAdmin, setPage }) {
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    const handleLogin = (e) => {
        e.preventDefault();
        if (password === ADMIN_PASSWORD) {
            sessionStorage.setItem('isAdmin', 'true');
            setIsAdmin(true);
            setPage('adminDashboard');
            setError('');
        } else {
            setError('Incorrect password. Please try again.');
        }
    };

    return (
        <div className="max-w-md mx-auto bg-white p-8 rounded-lg shadow-lg mt-10">
            <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Admin Login</h2>
            <form onSubmit={handleLogin}>
                <div className="mb-4">
                    <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="password">
                        Password
                    </label>
                    <input
                        id="password"
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                        placeholder="******************"
                    />
                </div>
                {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
                <div className="flex items-center justify-between">
                    <button
                        type="submit"
                        className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full"
                    >
                        Sign In
                    </button>
                </div>
            </form>
        </div>
    );
}

// --- Admin Dashboard Component ---
function AdminDashboard() {
    return (
        <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-8">Admin Dashboard</h1>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <CategoryManager />
                <PdfManager />
            </div>
        </div>
    );
}

// --- Category Manager Component ---
function CategoryManager() {
    const [categoryName, setCategoryName] = useState('');
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    const categoriesCollectionRef = collection(db, `artifacts/${appId}/public/data/categories`);

    useEffect(() => {
        const unsubscribe = onSnapshot(categoriesCollectionRef, (snapshot) => {
            const cats = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setCategories(cats);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching categories:", err);
            setError("Failed to load categories.");
            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    const handleAddCategory = async (e) => {
        e.preventDefault();
        if (!categoryName.trim()) {
            setError("Category name cannot be empty.");
            return;
        }
        try {
            await addDoc(categoriesCollectionRef, { name: categoryName.trim() });
            setCategoryName('');
            setError('');
        } catch (err) {
            console.error("Error adding category:", err);
            setError("Failed to add category.");
        }
    };

    const handleDeleteCategory = async (id) => {
        // Note: This doesn't delete PDFs within the category. A more robust implementation would handle this.
        if (window.confirm('Are you sure you want to delete this category? This will not delete the PDFs inside it.')) {
            try {
                await deleteDoc(doc(db, `artifacts/${appId}/public/data/categories`, id));
            } catch (err) {
                console.error("Error deleting category:", err);
                setError("Failed to delete category.");
            }
        }
    };

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Manage Categories</h3>
            <form onSubmit={handleAddCategory} className="mb-6">
                <div className="flex items-center">
                    <input
                        type="text"
                        value={categoryName}
                        onChange={(e) => setCategoryName(e.target.value)}
                        placeholder="New category name"
                        className="flex-grow shadow-sm appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button type="submit" className="ml-2 bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                        Add
                    </button>
                </div>
                 {error && <p className="text-red-500 text-xs italic mt-2">{error}</p>}
            </form>
            <h4 className="font-semibold text-gray-700 mb-2">Existing Categories:</h4>
            {loading ? <p>Loading categories...</p> : (
                <ul className="space-y-2">
                    {categories.map(cat => (
                        <li key={cat.id} className="flex justify-between items-center bg-gray-100 p-2 rounded">
                            <span className="text-gray-800">{cat.name}</span>
                            <button onClick={() => handleDeleteCategory(cat.id)} className="text-red-500 hover:text-red-700 p-1 rounded-full hover:bg-red-100">
                                <TrashIcon />
                            </button>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}


// --- PDF Manager Component ---
function PdfManager() {
    const [title, setTitle] = useState('');
    const [adminName, setAdminName] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('');
    const [pdfFile, setPdfFile] = useState(null);
    const [imageFile, setImageFile] = useState(null);
    const [categories, setCategories] = useState([]);
    const [uploading, setUploading] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const pdfFileRef = useRef(null);
    const imageFileRef = useRef(null);

    useEffect(() => {
        const categoriesCollectionRef = collection(db, `artifacts/${appId}/public/data/categories`);
        const unsubscribe = onSnapshot(categoriesCollectionRef, (snapshot) => {
            const cats = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setCategories(cats);
            if (cats.length > 0 && !selectedCategory) {
                setSelectedCategory(cats[0].id);
            }
        });
        return () => unsubscribe();
    }, [selectedCategory]);

    const handleUpload = async (e) => {
        e.preventDefault();
        const user = auth.currentUser;
        if (!user) {
            setError('Authentication error. Please refresh and try again.');
            console.error("User is not authenticated for upload.");
            return;
        }
        const userId = user.uid;

        if (!title || !adminName || !selectedCategory || !pdfFile) {
            setError('Please fill all required fields and select a PDF file.');
            return;
        }
        setUploading(true);
        setError('');
        setSuccess('');

        try {
            // 1. Upload PDF to user-specific storage path
            const pdfPath = `artifacts/${appId}/users/${userId}/pdfs/${pdfFile.name}_${Date.now()}`;
            const pdfStorageRef = ref(storage, pdfPath);
            await uploadBytes(pdfStorageRef, pdfFile);
            const pdfUrl = await getDownloadURL(pdfStorageRef);

            // 2. Upload Image (if exists) to user-specific storage path
            let imageUrl = '';
            let imagePath = '';
            if (imageFile) {
                imagePath = `artifacts/${appId}/users/${userId}/images/${imageFile.name}_${Date.now()}`;
                const imageStorageRef = ref(storage, imagePath);
                await uploadBytes(imageStorageRef, imageFile);
                imageUrl = await getDownloadURL(imageStorageRef);
            }

            // 3. Add metadata to public Firestore collection
            const pdfsCollectionRef = collection(db, `artifacts/${appId}/public/data/pdfs`);
            await addDoc(pdfsCollectionRef, {
                title,
                adminName,
                categoryId: selectedCategory,
                pdfUrl,
                pdfPath,
                imageUrl,
                imagePath,
                createdAt: new Date(),
            });

            setSuccess('PDF uploaded successfully!');
            // Reset form
            setTitle('');
            setAdminName('');
            setPdfFile(null);
            setImageFile(null);
            if(pdfFileRef.current) pdfFileRef.current.value = "";
            if(imageFileRef.current) imageFileRef.current.value = "";

        } catch (err) {
            console.error("Upload failed:", err);
            setError('Upload failed. Please check the console for details.');
        } finally {
            setUploading(false);
        }
    };

    return (
        <div className="bg-white p-6 rounded-lg shadow-lg">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Upload New PDF</h3>
            <form onSubmit={handleUpload} className="space-y-4">
                <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">PDF Title</label>
                    <input type="text" value={title} onChange={e => setTitle(e.target.value)} className="w-full input-style" placeholder="e.g., Concept Book Physics" />
                </div>
                <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">Admin Name</label>
                    <input type="text" value={adminName} onChange={e => setAdminName(e.target.value)} className="w-full input-style" placeholder="e.g., John Doe" />
                </div>
                <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">Category</label>
                    <select value={selectedCategory} onChange={e => setSelectedCategory(e.target.value)} className="w-full input-style bg-white">
                        {categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)}
                    </select>
                </div>
                <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">PDF File (Required)</label>
                    <input type="file" ref={pdfFileRef} onChange={e => setPdfFile(e.target.files[0])} accept=".pdf" className="w-full file-input-style" />
                </div>
                <div>
                    <label className="block text-gray-700 text-sm font-bold mb-2">Cover Image (Optional)</label>
                    <input type="file" ref={imageFileRef} onChange={e => setImageFile(e.target.files[0])} accept="image/*" className="w-full file-input-style" />
                </div>
                <div>
                    <button type="submit" disabled={uploading} className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:bg-blue-300 flex items-center justify-center">
                        {uploading ? 'Uploading...' : <><UploadIcon /> Upload PDF</>}
                    </button>
                </div>
                {error && <p className="text-red-500 text-sm mt-2">{error}</p>}
                {success && <p className="text-green-500 text-sm mt-2">{success}</p>}
            </form>
        </div>
    );
}

// --- Home Component (Public) ---
function Home({ onCategorySelect }) {
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const categoriesCollectionRef = collection(db, `artifacts/${appId}/public/data/categories`);
        const unsubscribe = onSnapshot(categoriesCollectionRef, (snapshot) => {
            const cats = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setCategories(cats);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching categories:", err);
            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    if (loading) {
        return <div className="text-center"><p>Loading categories...</p></div>;
    }

    return (
        <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">Welcome to the PDF Library</h1>
            <p className="text-gray-600 mb-8">Browse our collection by selecting a category below.</p>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {categories.map(cat => (
                    <div key={cat.id} onClick={() => onCategorySelect(cat)} className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 cursor-pointer text-center">
                        <h2 className="text-xl font-bold text-blue-600">{cat.name}</h2>
                    </div>
                ))}
            </div>
        </div>
    );
}

// --- Category View Component (Public) ---
function CategoryView({ category, isAdmin }) {
    const [pdfs, setPdfs] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (!category) return;
        setLoading(true);
        const pdfsQuery = query(collection(db, `artifacts/${appId}/public/data/pdfs`), where("categoryId", "==", category.id));
        
        const unsubscribe = onSnapshot(pdfsQuery, (snapshot) => {
            const pdfData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setPdfs(pdfData);
            setLoading(false);
        }, (err) => {
            console.error("Error fetching PDFs:", err);
            setLoading(false);
        });

        return () => unsubscribe();
    }, [category]);
    
    const handleDeletePdf = async (id, pdfPath, imagePath) => {
        if (window.confirm('Are you sure you want to delete this PDF? This action cannot be undone.')) {
            try {
                // 1. Delete Firestore document
                await deleteDoc(doc(db, `artifacts/${appId}/public/data/pdfs`, id));

                // 2. Delete PDF from Storage
                if (pdfPath) {
                    const pdfStorageRef = ref(storage, pdfPath);
                    await deleteObject(pdfStorageRef);
                }

                // 3. Delete Image from Storage
                if (imagePath) {
                    const imageStorageRef = ref(storage, imagePath);
                    await deleteObject(imageStorageRef);
                }
            } catch (err) {
                console.error("Error deleting PDF and its files:", err);
            }
        }
    };


    if (loading) {
        return <div className="text-center"><p>Loading PDFs...</p></div>;
    }

    return (
        <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-8">Category: <span className="text-blue-600">{category.name}</span></h1>
            {pdfs.length === 0 ? (
                <p className="text-gray-500">No PDFs found in this category yet.</p>
            ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {pdfs.map(pdf => (
                        <div key={pdf.id} className="bg-white rounded-lg shadow-lg overflow-hidden flex flex-col">
                             <div className="h-48 bg-gray-200 flex items-center justify-center relative">
                                {pdf.imageUrl ? (
                                    <img 
                                        src={pdf.imageUrl} 
                                        alt={pdf.title} 
                                        className="h-full w-full object-cover" 
                                        onError={(e) => { e.target.style.display = 'none'; }}
                                    />
                                ) : (
                                    <div className="h-full w-full flex items-center justify-center"><BookIcon /></div>
                                )}
                            </div>
                            <div className="p-4 flex-grow flex flex-col">
                                <h3 className="font-bold text-lg text-gray-800 mb-2 flex-grow">{pdf.title}</h3>
                                <p className="text-sm text-gray-500 mb-4">Provided by: {pdf.adminName}</p>
                                <a href={pdf.pdfUrl} target="_blank" rel="noopener noreferrer" className="mt-auto block w-full text-center bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                                    Open PDF
                                </a>
                                {isAdmin && (
                                    <button onClick={() => handleDeletePdf(pdf.id, pdf.pdfPath, pdf.imagePath)} className="mt-2 w-full bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition-colors flex items-center justify-center">
                                        <TrashIcon /> <span className="ml-2">Delete</span>
                                    </button>
                                )}
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}

// --- Add some basic CSS for inputs ---
const style = document.createElement('style');
style.textContent = `
    .input-style {
        shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        appearance: none;
        border-radius: 0.375rem;
        border-width: 1px;
        border-color: #D1D5DB;
        width: 100%;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        padding-left: 0.75rem;
        padding-right: 0.75rem;
        color: #374151;
        line-height: 1.5;
    }
    .input-style:focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
        --tw-ring-color: #3B82F6;
    }
    .file-input-style {
      display: block;
      width: 100%;
      font-size: 0.875rem;
      line-height: 1.25rem;
      color: #4B5563;
      border-radius: 0.375rem;
      border-width: 1px;
      border-color: #D1D5DB;
      cursor: pointer;
      background-color: #F9FAFB;
    }
    .file-input-style:focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
    }
    .file-input-style::file-selector-button {
        font-weight: 600;
        border-width: 0px;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        padding-left: 1rem;
        padding-right: 1rem;
        margin-right: 1rem;
        background-color: #EFF6FF;
        color: #1D4ED8;
    }
    .file-input-style::file-selector-button:hover {
        background-color: #DBEAFE;
    }
`;
document.head.appendChild(style);

